{"version":3,"file":"stockdata-query.js","sources":["src/stockdata-query.js"],"sourcesContent":["/**\n * TODO:\n * 1. 数据结构（对应到本地或远程存储结构）\n * 本地数据以json格式保存，\n *\n *\n * 股票数据访问层，主要用于计算和一些处理\n * 1. 后续会将数据的远程访问，本地访问在这里集成\n * 2.\n */\n\nconst _ = require(\"lodash\");\n\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst fp = fs.promises;\n\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\nconst DATA_PATH_ROOT = \".wtda\";\nconst DATA_PATH = {\n    daily: \"daily\",\n    info: \"info\",\n    financial: \"fin\",\n};\nconst STOCKLIST_FILE = \"stock-list.json\";\nconst INDEXLIST_FILE = \"index-list.json\";\n\nfunction getDataRoot() {\n    return path.join(os.homedir(), DATA_PATH_ROOT);\n}\n\n/**\n * 读取目前可用的完整股票列表返回，返回数据为对象\n * {\n *    info: {\n *      updateTime,\n *      ...\n *    }\n *    data: stockList[]\n * }\n *\n * stockList: [{\n *    ts_code,\n *    symbol,\n *    name,\n *    area,\n *    industry,\n *    fullname,\n *    enname,\n *    market,\n *    exchange,\n *    curr_type,\n *    list_status,\n *    delist_date,\n *    is_hs\n * }]\n *\n */\nasync function readStockList() {\n    let retData = null;\n    try {\n        await checkDataPath();\n\n        // 首先从目录中读取对应的列表文件，然后根据文件当中的信息决定是否需要更新\n        let stockListPath = path.join(getDataRoot(), STOCKLIST_FILE);\n        retData = JSON.parse(await fp.readFile(stockListPath, \"utf-8\"));\n        if (!_.isEmpty(retData)) {\n            logger.debug(`股票列表更新时间 @${retData.updateTime}`);\n        }\n    } catch (error) {\n        logger.error(`读取股票列表数据错误：${error}`);\n        throw new Error(\n            \"读取股票列表过程中出现错误，请检查后重新运行：\" + error\n        );\n        // retData = null\n    }\n\n    if (_.isEmpty(retData)) {\n        // 读取数据不存在\n        return {\n            updateTime: \"\",\n            data: [],\n        };\n    }\n    return retData;\n}\n\nasync function readStockIndexList() {\n    let retData = null;\n    try {\n        await checkDataPath();\n\n        // 首先从目录中读取对应的列表文件，然后根据文件当中的信息决定是否需要更新\n        let stockIndexListPath = path.join(getDataRoot(), INDEXLIST_FILE);\n        retData = JSON.parse(await fp.readFile(stockIndexListPath, \"utf-8\"));\n        if (!_.isEmpty(retData)) {\n            logger.debug(`指数列表更新时间 @${retData.updateTime}`);\n        }\n    } catch (error) {\n        logger.error(`读取指数列表数据错误：${error}`);\n        throw new Error(\n            \"读取指数列表过程中出现错误，请检查后重新运行：\" + error\n        );\n        // retData = null\n    }\n\n    if (_.isEmpty(retData)) {\n        // 读取数据不存在\n        return {\n            updateTime: \"\",\n            data: [],\n        };\n    }\n    return retData;\n}\n\nconst stockDataNames = {\n    // 日数据\n    daily: \"daily\",\n    // 复权因子\n    adjustFactor: \"adjustFactor\",\n    // 停复牌信息\n    suspendInfo: \"suspendInfo\",\n    // 基本面信息\n    dailyBasic: \"dailyBasic\",\n    // 个股资金流向\n    moneyFlow: \"moneyFlow\",\n    // // 指数\n    // indexDailyBasic: \"indexDailyBasic\",\n    // 指数日线\n    indexDaily: \"indexDaily\",\n    // 利润表\n    income: \"income\",\n    // 负债表\n    balanceSheet: \"balanceSheet\",\n    // 现金流\n    cashFlow: \"cashFlow\",\n    // 业绩预告\n    forecast: \"forecast\",\n    // 业绩快报\n    express: \"express\",\n    // 分红送股\n    dividend: \"dividend\",\n    // 财务指标数据\n    financialIndicator: \"financialIndicator\",\n    // 主营业务构成\n    financialMainbiz: \"financialMainbiz\",\n    // 财报披露日期\n    disclosureDate: \"disclosureDate\",\n    // 股权质押统计\n    pledgeStat: \"pledgeStat\",\n    // 股权质押明细\n    pledgeDetail: \"pledgeDetail\",\n    // 趋势\n    trend: \"trend\",\n};\n\nconst stockDataParams = {\n    // 日数据\n    daily: { name: \"daily\", path: DATA_PATH.daily, ext: \"\" },\n    // 复权因子\n    adjustFactor: { name: \"adjustFactor\", path: DATA_PATH.daily, ext: \".adj\" },\n    // 停复牌信息\n    suspendInfo: { name: \"suspendInfo\", path: DATA_PATH.info, ext: \".sus\" },\n    // 基本面信息\n    dailyBasic: { name: \"dailyBasic\", path: DATA_PATH.info, ext: \".bsc\" },\n    // 个股资金流向\n    moneyFlow: { name: \"moneyFlow\", path: DATA_PATH.info, ext: \".mf\" },\n    // // 指数\n    // indexDailyBasic: \"indexDailyBasic\",\n    // 指数日线\n    indexDaily: { name: \"indexDaily\", path: DATA_PATH.daily, ext: \"\" },\n    // 利润表\n    income: { name: \"income\", path: DATA_PATH.financial, ext: \".ic\" },\n    // 负债表\n    balanceSheet: {\n        name: \"balanceSheet\",\n        path: DATA_PATH.financial,\n        ext: \".bs\",\n    },\n    // 现金流\n    cashFlow: { name: \"cashFlow\", path: DATA_PATH.financial, ext: \".cf\" },\n    // 业绩预告\n    forecast: { name: \"forecast\", path: DATA_PATH.financial, ext: \".fc\" },\n    // 业绩快报\n    express: { name: \"express\", path: DATA_PATH.financial, ext: \".ep\" },\n    // 分红送股，这个数据不能使用通用方式\n    dividend: { name: \"dividend\", path: DATA_PATH.financial, ext: \".dd\" },\n    // 财务指标数据\n    financialIndicator: {\n        name: \"financialIndicator\",\n        path: DATA_PATH.financial,\n        ext: \".id\",\n    },\n    // 主营业务构成\n    financialMainbiz: {\n        name: \"financialMainbiz\",\n        path: DATA_PATH.financial,\n        ext: \".mb\",\n    },\n    // 财报披露日期\n    disclosureDate: {\n        name: \"disclosureDate\",\n        path: DATA_PATH.financial,\n        ext: \".dt\",\n    },\n    // 股权质押统计\n    pledgeStat: { name: \"pledgeStat\", path: DATA_PATH.financial, ext: \".ps\" },\n    // 股权质押明细\n    pledgeDetail: {\n        name: \"pledgeDetail\",\n        path: DATA_PATH.financial,\n        ext: \".pd\",\n    },\n    trend: {\n        name: \"trend\",\n        path: DATA_PATH.daily,\n        ext: \".tr\",\n    },\n};\n\nasync function readStockData(dataName, tsCode) {\n    if (!stockDataNames[dataName]) {\n        throw new Error(\"不支持的数据类型：\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    let retData = {\n        updateTime: null,\n        data: [],\n        // 下面考虑放个字段说明\n    };\n\n    let params = stockDataParams[dataName];\n    try {\n        await checkDataPath();\n\n        let dataFile = getStockDataFile(dataName, tsCode);\n        logger.debug(\n            `读取本地数据 ${tsCode}.${dataName}，参数配置 %o，文件 ${dataFile}`,\n            params\n        );\n        try {\n            retData = JSON.parse(await fp.readFile(dataFile, \"utf-8\"));\n        } catch (error) {\n            // 文件不存在，不考虑其它错误\n            if (!(error && error.code === \"ENOENT\")) {\n                logger.error(\n                    `读取${tsCode}的${dataName}文件${dataFile}时发生错误：${error}, %o`,\n                    error\n                );\n            } else {\n                logger.debug(\n                    `读取${tsCode}的${dataName}文件${dataFile}不存在，%o`,\n                    error\n                );\n            }\n            retData = { data: [] };\n        }\n    } catch (error) {\n        logger.error(`从本地读取个股数据${dataName}时发生错误 ${error}`);\n    }\n    return retData;\n}\n\nfunction getStockDataFile(dataName, tsCode) {\n    // logger.debug(`计算文件名：${dataName}, ${tsCode}`);\n    let params = stockDataParams[dataName];\n    // logger.debug(\"获取参数：%o\", params);\n    if (!params) {\n        throw new Error(\"不支持的数据类型\" + dataName);\n    }\n    if (_.isEmpty(tsCode)) {\n        throw new Error(\"未设置读取股票代码\");\n    }\n    return path.join(getDataRoot(), params.path, tsCode + params.ext + \".json\");\n}\n\nasync function checkDataPath() {\n    let dataPath = getDataRoot();\n\n    // 做基础的目录访问检查\n    try {\n        await fp.access(\n            dataPath,\n            fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n        );\n    } catch (error) {\n        logger.debug(`检查数据根目录错误 ${error}`);\n        await fp.mkdir(dataPath, { recursive: true });\n    }\n\n    for (let key of Object.keys(DATA_PATH)) {\n        let tmpPath = path.join(dataPath, DATA_PATH[key]);\n        try {\n            await fp.access(\n                tmpPath,\n                fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK\n            );\n        } catch (error) {\n            logger.debug(`检查目录${DATA_PATH[key]}错误 ${error}`);\n            await fp.mkdir(tmpPath, { recursive: true });\n        }\n    }\n}\n\ncheckDataPath();\n\nexport {\n    readStockData,\n    readStockList,\n    readStockIndexList,\n    getDataRoot,\n    getStockDataFile,\n    DATA_PATH,\n    STOCKLIST_FILE,\n    INDEXLIST_FILE,\n    stockDataNames,\n};\n"],"names":["_","require","os","path","fs","fp","promises","logger","pino","level","process","env","LOGGER","prettyPrint","levelFirst","translateTime","crlf","prettifier","DATA_PATH","daily","info","financial","getDataRoot","join","homedir","stockDataNames","adjustFactor","suspendInfo","dailyBasic","moneyFlow","indexDaily","income","balanceSheet","cashFlow","forecast","express","dividend","financialIndicator","financialMainbiz","disclosureDate","pledgeStat","pledgeDetail","trend","stockDataParams","name","ext","getStockDataFile","dataName","tsCode","params","Error","isEmpty","async","checkDataPath","dataPath","access","constants","F_OK","R_OK","W_OK","error","debug","mkdir","recursive","key","Object","keys","tmpPath","retData","updateTime","data","dataFile","JSON","parse","readFile","code","stockIndexListPath","stockListPath"],"mappings":"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"}